-- ds.page: OAuth 2.0

# Delegated Authorization with OAuth 2.0

Let's say I trust on Google and I am also on AbrarK. I want AbrarK to access to
my contacts.

Note: We should not use OAuth protocol for authentication we should use it for
authorization. OAuth designed for scopes and permissions, it is care about is your
access token have permission to access the some particular resource, it does not
really care about who the user is.

### Problem with OAuth 2.0 for authentication

- No standard way to get the user's information
- Every implementation is little different
- No common set of scopes


### OAuth 2.0 and OpenID Connect

- OpenID Connect is for  authentication
- OAuth 2.0 is for authorization


## How does google OAuth works

AbrarK.com have a button Say [connect with google] that redirects user to
accounts.google.com, where user have to fill the email and password and then
google will ask that this application wants to access these and these things from
your account will you provide access, then user can choose yes or no, if user
chooses yes then abrark.com/callback(by passing code) and then abrark server will
call google server by passing this code and server secrets to get the access token
and set the access token to browser.

## OAuth 2.0 Terminology

- Resource Owner
  - Who owns the data, meaning user who is owning the data.
- Client
  - Application where you are trying to logged-in using google auth, in this
  case, there is yelp.
- Authorization Server
  - accounts.google.com
- Resource Server
  - Where your data Apis exists
  - Where your resources actually stored, in this case there is google apis that
  client wants to access on user's behalf.
  - Sometimes authorization and resource server are the same thing but many times
  they are separate.
- Authorization Grant
  - Where user approves that I am giving permissions to access these resources
- Redirect Uri
  - Where authorization server redirects back to after successful login or failed
- Access Token
  - This token is used to access the data from resource server.
  - It depends on scope what resources you can access, using this access token.

-- ds.image:
src: $assets.files.static.oauth.OAuth-2-Flow.png
width: fill-container

-- ds.h2: More OAuth 2.0 terminology

- Scope
  - Authorization server have list of scopes like
    - contacts.read, contacts.update, email.read, email.delete, etc....
  - So client have to by passing these scopes what level of data you want to
  access and what do you want to do with the data, which apis you want to access.
- Consent
 - Based on that authorization server create a list of consent to the client.

Note: In the above approach we have used authorization code to get the access
token, why just we can get the access token.

-- ds.h2: Even More OAuth 2.0 terminology

- Back Channel(highly secured channel)
  - If I have server which only I have a access to and If I have made a secure
  call of my server to google server, meaning or less this is almost a secure call.
- Front Channel(less secured channel)
  - Like browser
  - Browsers are safe but there are some loop holes how did they get build.
  - People can check your cookie in the browser, can be copied and pasted.
  - If I have stored it in javascript, then somebody can also check it with view-src.
  - We can trust more on the our server, but not complete trust on a browser.
  - Someone looking from your shoulder can see this, they are not total secure.

Because access code comes with redirected URI's query parameters in the browser,
using this access code then abrark.com server will call authorization server
(accounts.google.com) to get the access token and redirect user with access-token.

In that case it is more secure because access token using the highly secure
channel. And it can also map this access token to something like it's own
token: `some-encrypted-id`, and not passing the actual token which authorization
server is sharing with you.

On the other hand, front channel, where everything will happen only on browser
so access token will be shared with the in the query parameters.

On the back channel, even if somebody steals the your access code they can not
get the access token, because to get the access token backend server uses access
code and secret key to get the access token.

-- ds.h1: How it actually works

-- ds.h2: Starting the flow

On Clicking on the `Login with Google` user will be redirected to below request.

This request will go the authorization server, which is google in that case.

To get the client id, user has to login with google and create a client and you
will the two things `client_id` and `client_secret`.

`client_id` is not sensitive information, which is identifies the `abrark-google-auth`
application.

`client_secret` is used in the backend channel, which is used to get the access
token from abrark.com server.


-- ds.code:
lang: text

https://accounts.goolge.com/o/oauth2/v2/auth?
  client_id=abc123&
  redirect_uri=https://abrark.com/callback&
  scope=profile&
  response_type=code&
  state=foobar

-- ds.h2: Calling Back

After google.com auth flow completed it will callback to the below URL.

-- ds.code:
lang: text

https://abrark.com/callback?
  error=access_denied&
  error_description=The user did not consent.

https://abrark.com/callback?
  code=oMSderasfQmertivesq7&
  state=foobar

-- ds.h2: Exchange code for an access token

The above redirected call will go the abarak.com server and exchange the code
with the authorization server to get the access token.

-- ds.code: Server Request
lang: text

POST www.googleapis.com/oauth2/v4/token
Content-Type: application/x-www-form-urlencoded

code=oMSderasfQmertivesq7&
client_id=abc123&
client_secret=secret123&
grant_type=authorization_code


-- ds.code: Server Response
lang: json

{
  "access_token": "fFAGRNJurlFTRs7QWEMg",
  "expires_in": 3920,
  "token_type": "Bearer"
}


-- ds.h2: Use the access token

When abrark server will call this API with the access token, api server will
validate the access token and also checks scope of the access token.

-- ds.code: Calling Contacts API
lang: text

GET api.google.com/user/contact-details/
Authorization: Bearer fFAGRNJurlFTRs7QWEMg


-- ds.h1: What OpenID Connect adds

- ID token
- UserInfo endpoint for getting more user information
- Standard set of scopes
- Standardized implementation


-- ds.h2: OpenID connect Flow

Flow is almost same as OAuth 2.0 but in OAuth while exchanging the code with
authorization server, server get only the access token, while in OpenID connect
server get the access token and ID token. OpenId connect protocol is ID token +
OAuth 2.0. We can get the more user information in OpenId connect.


-- ds.h2: Starting the Flow

Requesting the authorization server, sign-in to google.com and then finally we
get the a JSON web token as ID token.

-- ds.code: Auth Request
lang: text

https://accounts.goolge.com/o/oauth2/v2/auth?
  client_id=abc123&
  redirect_uri=https://abrark.com/callback&
  scope=openid&
  response_type=id_token&
  response_mode=fragment&
  state=foobar

-- ds.h2: The ID Token (JWT)

-- ds.code:
lang: text

(Header)
.
{
  "iss": "https://accounts.google.com",
  "sub": "you@gmail.com",
  "name": "Abrar Khan",
  "aud": "asdfas",
  "exp": 123456,
  "iat": 231412,
  "auth_time": 234123
}
.
(Signature)




-- ds.h1: Rough Work

- OAuth 2.0 and OpenID connect
- Simple login or forms auth
  - collect username and password via form
  - Hash password, verify hash, look up user info, look up auth info
  - save it to db -> Set-Cookie in the browser
  - Downsides
    - Security
    - Maintenance

- Identity use cases (pre-2010)
  - Simple login (forms and cookies)
  - Single sign-on across sites
  - Mobile app login
  - Delegated authorization
    - How can I let a website access my data without giving it my password.

- Delegated Authorization
- entrust (a task or responsibility) to another person, typically one who is
  less senior than oneself.
- send or authorize (someone) to do something as a representative.
