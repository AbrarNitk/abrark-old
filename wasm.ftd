-- ds.page: Wasm

-- ds.h1: WebAssembly


WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based
virtual machine. Wasm is designed as a portable compilation target for
programming languages, enabling deployment on the web for client and server
applications.

- [WebAssembly Org](https://webassembly.org/)
- [Mozilla WebAssembly Docs](https://developer.mozilla.org/en-US/docs/WebAssembly)
- [Awesome Wasm](https://github.com/mbasso/awesome-wasm)
- [Reddit](https://www.reddit.com/r/WebAssembly/)
- [Stack Overflow](https://stackoverflow.com/questions/tagged/webassembly)
- [News Letter](https://wasmweekly.news/)
- [Experiments Repo](https://github.com/ZuInnoTe/rust-wasm-dynamic-module-study)
- [A Good Blog From Radu](https://radu-matei.com/blog/practical-guide-to-wasm-memory/)
- [Article 1](https://adlrocha.substack.com/p/adlrocha-playing-with-wasmtime-and)
- [WebAssembly Memory By OReilly](https://www.oreilly.com/library/view/webassembly-the-definitive/9781492089834/ch04.html)

-- ds.h2: Stack Based Virtual Machine

- [Article 1](https://andreabergia.com/blog/2015/03/stack-based-virtual-machines-1/)
- [Article 2](https://andreabergia.com/blog/2015/03/stack-based-virtual-machines-2/)
- [Wikipedia Page For Stack based virtual Machines](https://en.wikipedia.org/wiki/Stack_machine)
- [Comparison of Common VMs](https://en.wikipedia.org/wiki/Comparison_of_application_virtualization_software)


-- ds.h2: FAQs

Why create a new standard when there is already asm.js?

There are two main benefits WebAssembly provides:

1. The kind of binary format being considered for WebAseembly can be natively
decoded much faster than JS can be parsed(experiments shows 20x faster)

2. By avoiding the simutaneous asm.js constraints AOT-compilability and good
performance even on engines without ....

WebAssembly minimizes costs by having a design that allows a browser to implement
WebAssembly inside its existing JavaScript engine (thereby reusing the JavaScript
engine's existing compiler backend, ES6 module loading frontend, security,
sanboxing mechanism and other supporting VM components). Thus, in cost, wasm
should comparable to a big new JavaScript feature, not a fundamental extension
to the browser model.

[More...](https://webassembly.org/docs/faq/)

-- ds.h2: High Level Goals

- Define a portable, size- and load-time-efficient binary format to serve as a
compilation target which can be compiled to execute at native speed.
- Design to execute within and integrate well with the existing Web platform
- Design to support non-browser embeddings as well.

[More..](https://webassembly.org/docs/high-level-goals/)

-- ds.h2: What are WebAssembly's Use Cases

-- ds.h3: Inside the browser

- Image and Video editing
- Music Applications(streaming and caching)
- Image Recognition
- Local Web Server
- [More...](https://webassembly.org/docs/use-cases/)


-- ds.h3: Outside the browser

- Game distribution service (portable and secure).
- Server-side compute of untrusted code.
- Server-side application.
- Hybrid native apps on mobile devices.
- Symmetric computations across multiple nodes.


-- ds.h2: Portability

WebAssembly’s binary format is designed to be executable efficiently on a
variety of operating systems and instruction set architectures, on the Web and
off the Web.

-- ds.h3: Assumptions for Efficient Execution

WebAssembly portability assumes that execution environments offer the following
characteristics:

- 8-bit bytes.
- Addressable at a byte memory granularity.
- Support unaligned memory accesses or reliable trapping that allows software
emulation thereof.
- Two’s complement signed integers in 32 bits and optionally 64 bits.
- IEEE 754-2008 32-bit and 64-bit floating point, except for a few exceptions.
- Little-endian byte ordering.
- Memory regions which can be efficiently addressed with 32-bit pointers or indices.
- wasm64 additionally supports linear memory bigger than 4 GiB with 64-bit
pointers or indices.
- Enforce secure isolation between WebAssembly modules and other modules or
processes executing on the same machine.
- An execution environment which offers forward progress guarantees to all
threads of execution (even when executing in a non-parallel manner).
- Availability of lock-free atomic memory operators, when naturally aligned,
for 8- 16- and 32-bit accesses. At a minimum this must include an atomic
compare-and-exchange operator (or equivalent load-linked/store-conditional).
- wasm64 additionally requires lock-free atomic memory operators, when naturally
aligned, for 64-bit accesses.


-- ds.h3: API

WebAssembly does not specify any APIs or syscalls, only an import mechanism
where the set of available imports is defined by the host environment.


-- ds.h2: Security

The security model of WebAssembly has two important goals: (1) protect users
from buggy or malicious modules, and (2) provide developers with useful primitives
and mitigations for developing safe applications, within the constraints of (1).

-- ds.h3: Users

Each WebAssembly module executes within a sandboxed environment separated from
the host runtime using fault isolation techniques. This implies:

- Applications execute independently, and can’t escape the sandbox without
going through appropriate APIs.

[More...](https://webassembly.org/docs/security/)

[WebAssembly Structure](https://webassembly.github.io/spec/core/syntax/index.html)

- Applications generally execute deterministically with limited exceptions.

-- ds.h2: Web Embedding

Unsurprisingly, one of WebAssembly’s primary purposes is to run on the Web, for
example embedded in Web browsers (though this is not its only purpose).

TODO: Have to explore this later

[More...](https://webassembly.org/docs/web/)

[JavaScript API](https://webassembly.org/docs/js/)

-- ds.h2: Non-Web Embedding

While WebAssembly is designed to run on the Web, it is also desirable for it to
be able to execute well in other environments, including everything from minimal
shells for testing to full-blown application environments e.g. on servers in
datacenters, on IoT devices, or mobile/desktop apps. It may even be desirable
to execute WebAssembly embedded within larger programs.

Non-Web environments may include JavaScript VMs (e.g. node.js), however
WebAssembly is also being designed to be capable of being executed without a
JavaScript VM present.


The WebAssembly spec itself will not try to define any large portable libc-like
library. However, certain features that are core to WebAssembly semantics
that are similar to functions found in native libc would be part of the core
WebAssembly spec as primitive operators (e.g., the grow_memory operator, which
is similar to the sbrk function on many systems, and in the future, operators
similar to dlopen).


[Dynamic Linking APIs Docs](https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md)
[Sbrk system call](https://en.wikipedia.org/wiki/Sbrk)
[dlopen](https://tldp.org/HOWTO/html_single/C++-dlopen/)



-- ds.h1: APIs for Interacting with WebAssembly

- [Core Spec](https://www.w3.org/TR/wasm-core/)
- [Web JS Interface](https://www.w3.org/TR/wasm-js-api/)
- [Wasm Web API](https://www.w3.org/TR/wasm-web-api/)



-- ds.h2: Sample API Usage

Note: Important to read

-- ds.code: demo.wasm
lang: txt

(module
    (import "js" "import1" (func $i1))
    (import "js" "import2" (func $i2))
    (func $main (call $i1))
    (start $main)
    (func (export "f") (call $i2))
)

-- ds.markdown:

and the following JavaScript, run in a browser:

-- ds.code: JavaScript
lang: js

var importObj = {js: {
    import1: () => console.log("hello,"),
    import2: () => console.log("world!")
}};
fetch('demo.wasm').then(response =>
    response.arrayBuffer()
).then(buffer =>
    WebAssembly.instantiate(buffer, importObj)
).then(({module, instance}) =>
    instance.exports.f()
);

-- ds.h2: Internal Storage

-- ds.h3: Interaction of the WebAssembly Store with JavaScript

Note: WebAssembly semantics are defined in terms of an abstract store,
representing the state of the WebAssembly abstract machine. WebAssembly
operations take a store and return an updated store.


Elements of the WebAssembly store may be identified with JavaScript values.
In particular, each WebAssembly memory instance with a corresponding Memory(https://webassembly.github.io/spec/js-api/#memory)
object is identified with a JavaScript Data Block; modifications to this
Data Block(https://tc39.github.io/ecma262/#sec-data-blocks) are identified to
updating the agent’s store to a store which reflects those changes, and vice versa.

[More...](https://webassembly.github.io/spec/js-api/#webassembly-storage)

-- ds.h3: The WebAssembly Namespace

-- ds.code:
lang: js

dictionary WebAssemblyInstantiatedSource {
    required Module module;
    required Instance instance;
};

[Exposed=(Window,Worker,Worklet)]
namespace WebAssembly {
    boolean validate(BufferSource bytes);
    Promise<Module> compile(BufferSource bytes);

    Promise<WebAssemblyInstantiatedSource> instantiate(
        BufferSource bytes, optional object importObject);

    Promise<Instance> instantiate(
        Module moduleObject, optional object importObject);
};


-- ds.h3: Modules

-- ds.code: Modules
lang: js

enum ImportExportKind {
  "function",
  "table",
  "memory",
  "global"
};

dictionary ModuleExportDescriptor {
  required USVString name;
  required ImportExportKind kind;
  // Note: Other fields such as signature may be added in the future.
};

dictionary ModuleImportDescriptor {
  required USVString module;
  required USVString name;
  required ImportExportKind kind;
};

[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Module {
  constructor(BufferSource bytes);
  static sequence<ModuleExportDescriptor> exports(Module moduleObject);
  static sequence<ModuleImportDescriptor> imports(Module moduleObject);
  static sequence<ArrayBuffer> customSections(Module moduleObject, DOMString sectionName);
};


-- ds.h3: Instance

-- ds.code:
lang: js


[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Instance {
  constructor(Module module, optional object importObject);
  readonly attribute object exports;
};

-- ds.h3: Memories

A Memory object represents a single memory instance which can be simultaneously
referenced by multiple Instance objects. Each Memory object has the following
internal slots:

Memory: [A Memory Address](https://webassembly.github.io/spec/core/exec/runtime.html#syntax-memaddr)
BufferObject: [ArrayBuffer](https://tc39.es/ecma262/#sec-arraybuffer-objects)


-- ds.code:
lang: js

dictionary MemoryDescriptor {
  required [EnforceRange] unsigned long initial;
  [EnforceRange] unsigned long maximum;
};

[LegacyNamespace=WebAssembly, Exposed=(Window,Worker,Worklet)]
interface Memory {
  constructor(MemoryDescriptor descriptor);
  unsigned long grow([EnforceRange] unsigned long delta);
  readonly attribute ArrayBuffer buffer;
};


-- ds.h1: Wasmtime

A Fast and secure runtime for WebAssembly, A Bytecode Alliance project.


[wasm runtime](https://wasmtime.dev/)
[wasmtime rust crate](https://github.com/bytecodealliance/wasmtime/tree/main/crates/wasmtime)
[wasmtime docs](https://docs.rs/wasmtime/0.26.1/wasmtime/index.html)

-- ds.h2: About the Bytecode Alliance

https://bytecodealliance.org/

The Bytecode Alliance is a nonprofit organization dedicated to creating secure
new software foundations, building on standards such as WebAssembly and
WebAssembly System Interface (WASI).

-- ds.h2: Wasmtime's Rust embedding API

This crate contains an API used to interact with WebAssembly modules. For
example you can compile modules, instantiate them, call them, etc. As an
embedder of WebAssembly you can also provide WebAssembly modules functionality
from the host by creating host-defined functions, memories, globals, etc, which
can do things that WebAssembly cannot (such as print to the screen).


An example of using Wasmtime looks like:

-- ds.code:
lang: rs

use anyhow::Result;
use wasmtime::*;

fn main() -> Result<()> {
    // Modules can be compiled through either the text or binary format
    let engine = Engine::default();
    let wat = r#"
        (module
            (import "host" "hello" (func $host_hello (param i32)))

            (func (export "hello")
                i32.const 3
                call $host_hello)
        )
    "#;
    let module = Module::new(&engine, wat)?;

    // All wasm objects operate within the context of a "store". Each
    // `Store` has a type parameter to store host-specific data, which in
    // this case we're using `4` for.
    let mut store = Store::new(&engine, 4);
    let host_hello = Func::wrap(&mut store, |caller: Caller<'_, u32>, param: i32| {
        println!("Got {} from WebAssembly", param);
        println!("my host state is: {}", caller.data());
    });

    // Instantiation of a module requires specifying its imports and then
    // afterwards we can fetch exports by name, as well as asserting the
    // type signature of the function with `get_typed_func`.
    let instance = Instance::new(&mut store, &module, &[host_hello.into()])?;
    let hello = instance.get_typed_func::<(), (), _>(&mut store, "hello")?;

    // And finally we can call the wasm!
    hello.call(&mut store, ())?;

    Ok(())
}

-- ds.h2: Core Concepts


There are a number of core types and concepts that are important to be aware of
when using the wasmtime crate:

- [Engine](https://docs.rs/wasmtime/latest/wasmtime/struct.Engine.html):- a
  global compilation environment for WebAssembly. An Engine is an object that
  can be shared concurrently across threads and is created with a Config to
  tweak various settings. Compilation of any WebAssembly requires first
  configuring and creating an Engine.

- [Module](https://docs.rs/wasmtime/latest/wasmtime/struct.Module.html):- - a
  compiled WebAssembly module. This structure represents in-memory JIT code
  which is ready to execute after being instantiated. It’s often important to
  cache instances of a Module because creation (compilation) can be expensive.
  Note that Module is safe to share across threads, and can be created from a
  WebAssembly binary and an Engine with Module::new. Caching can either happen
  with `Engine::precompile_module` or `Module::serialize`, feeding those bytes back
  into `Module::deserialize`.

- [Store](https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html):- container
  for all information related to WebAssembly objects such as functions,
  instances, memories, etc. A Store<T> allows customization of the T to store
  arbitrary host data within a Store. This host data can be accessed through
  host functions via the Caller function parameter in host-defined functions.
  A Store is required for all WebAssembly operations, such as calling a wasm
  function. The Store is passed in as a “context” to methods like Func::call.
  Dropping a Store will deallocate all memory associated with WebAssembly
  objects within the Store.

- [Instance](https://docs.rs/wasmtime/latest/wasmtime/struct.Instance.html):-
  Instance - an instantiated WebAssembly module. An instance is where you can
  actually acquire a Func from, for example, to call.

- [Func](https://docs.rs/wasmtime/latest/wasmtime/struct.Func.html):- a
  WebAssembly (or host) function. This can be acquired as the export of an
  Instance to call WebAssembly functions, or it can be created via functions
  like Func::wrap to wrap host-defined functionality and give it to WebAssembly.

[More...](https://docs.rs/wasmtime/latest/wasmtime/index.html#core-concepts)
