-- ds.page: Work Daily Update Jan 2023

-- ds.h1: 13th Feb

- today work:
- tejar library changes
- hsr deployment

- demo day planning
  - fifthtry home page changes
  - it will contain fastn, hostn, and about FTD links and summary of the page
  - figma json to FTD
  - growisto-course
  - fastn semantic versioning
  - background-repeat
  - scale
  - background-image
  - image crop
  - text-style
  - rotate
  - shadow
  - background-gradient
  - fastn don't use continue on fail or --ignore
  - list style
  - ftd.dev/best-practices/
  - marketing status
  - contest page live asap
  - have to wait for ftd documentation for contest
  - arpita: has to upate the ftd cheatsheet
  - expander video has to be reshooted
  - from colleges and via social media platform
  - ftd.dev and fastn.io index page should be fixed
  - fastn sitemap cleaning


- abrark: hsr and hsw
  - tejar checksum and error changes
  - hsr invalidate cache
  - hsr: deploy & test with domains
  - publish-static: writer
  - publish-static: cli integration
  - publish-static: github action



-- ds.h1: 8th Feb

- reading news
- hostn static reader
- using hyper for reader hsr
- need to understand the streaming in rust

-- ds.h1: Tue 7th Feb

- read about s3 functionality
- read about different algos for s3 uploading and downloading
- create the main in rust for hostn-service
- read about how to handle the wildcard sub domains on a server
- make live hostn service on heroku or fly
- aws access for s3 and resources
- learn about s3 commands and aws account IAM and all

-- ds.h2: fastn static deploy

-- ds.h3: build command changes

- separate the css and js files
- keep them separate files and use them as external links


-- ds.h3: cli changes

- command fastn static init
  - this command will send the package name to server
  - serve will respond with keys
  - save keys to ~/.hostn/config.json into client local machine
  - [{package-name: "full name of the package", key: "server provided key"}]


- command fastn static status
  - send all the keys and package name to server
  - server will send back with all the information like domain name, last deployed and all
  - with all the deployed packages
  

- command fastn static deploy
  - capture the build output
  - provide it to the tejar
  - tejar will give you output with different files
  - send it to the server

- tejar
  - have to work on this algorithm
  - this should be very straight forward
  - can be built independently and used as dependency
  - Input: It will take list of files
  - Output: list.json and files.tejar
  - list.json will be containing all the files
  - [{file-name: <>, file-size: byte size, file-start-from: start position in the files.tejar}]
  - files.tejar: it will somply store the all the file content like byte array


-- ds.h3: server changes(hostn-service)

- use actix as http server
- use separate module for the deploy static
- integration with s3 bucket
- deploy command api
  - upload the file on the s3
  - read the file from the s3 by passing the bytes and file path
- assign/init command api
- status command api
- create a bucket on s3
- create an account on s3
- deploy hostn service on the heroku
- handle the wild card domains
  - when this request comes need to get the specific package config file from s3
    and start serving the files
  - there can be two types of files, normal file and static file


-- ds.h1: Application for hostn

- they also have db and docker stuff
- for docker we can do it fly
- we should have also sentry 



-- ds.h1: 6th Feb

- hostn meeting with amitu
- demo day planning
- hostn static system design
- reading about s3
- amazon account creation and permission
- 


-- ds.h1: 5th Feb

- fastn to fastn and fastn-core

-- ds.h1: 2 Feb

- fastn.dev to fastn.io
  - status: done
  - code changes in fastn.dev repository
  - repo rename
  - mapping with fastn.io domain

- hostn static page
  - status: done
  - create a home page of the hostn
  - deploy it with heroku
  - map the domain with hostn.io



-- end: ds.page
